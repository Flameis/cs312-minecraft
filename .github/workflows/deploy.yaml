name: Deploy Minecraft Server

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      action:
        description: 'Deployment action'
        required: true
        default: 'deploy'
        type: choice
        options:
        - deploy
        - destroy
        - test

env:
  AWS_DEFAULT_REGION: us-west-2
  TF_VAR_instance_type: t3.small
  TF_VAR_minecraft_port: 25565

jobs:
  validate:
    name: Validate Infrastructure Code
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "~1.5"
    
    - name: Setup Ansible
      run: |
        sudo apt-get update
        sudo apt-get install -y ansible
    
    - name: Terraform Format Check
      working-directory: ./terraform
      run: terraform fmt -check
    
    - name: Terraform Init
      working-directory: ./terraform
      run: terraform init
    
    - name: Terraform Validate
      working-directory: ./terraform
      run: terraform validate
    
    - name: Ansible Syntax Check
      working-directory: ./ansible
      run: |
        ansible-playbook --syntax-check playbooks/minecraft-setup.yml

  deploy:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'deploy')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "~1.5"
        terraform_wrapper: false
    
    - name: Setup Ansible
      run: |
        sudo apt-get update
        sudo apt-get install -y ansible jq nmap
        pip install boto3 botocore
    
    - name: Make scripts executable
      run: chmod +x scripts/*.sh
    
    - name: Initialize Terraform
      run: ./scripts/init.sh
    
    - name: Plan Infrastructure
      run: ./scripts/plan.sh
    
    - name: Apply Infrastructure
      run: ./scripts/apply.sh
    
    - name: Wait for Instance Boot
      run: sleep 180
    
    - name: Configure Minecraft Server
      run: ./scripts/configure.sh
    
    - name: Test Deployment
      run: ./scripts/test.sh
    
    - name: Save Infrastructure Outputs
      run: |
        cd terraform
        terraform output -json > ../deployment-outputs.json
    
    - name: Upload Deployment Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: deployment-outputs
        path: deployment-outputs.json
        retention-days: 30

  test:
    name: Test Infrastructure
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'test')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "~1.5"
        terraform_wrapper: false
    
    - name: Setup Ansible
      run: |
        sudo apt-get update
        sudo apt-get install -y ansible jq nmap
        pip install boto3 botocore
    
    - name: Make scripts executable
      run: chmod +x scripts/*.sh
    
    - name: Test Infrastructure Plan
      run: |
        ./scripts/init.sh
        ./scripts/plan.sh
    
    - name: Validate Ansible Playbooks
      working-directory: ./ansible
      run: |
        ansible-playbook --check --diff playbooks/minecraft-setup.yml --extra-vars "skip_service_start=true"

  destroy:
    name: Destroy Infrastructure
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    environment: 
      name: production
      url: https://github.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "~1.5"
    
    - name: Make scripts executable
      run: chmod +x scripts/*.sh
    
    - name: Destroy Infrastructure
      run: ./scripts/destroy.sh

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always() && (github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'deploy'))
    
    steps:
    - name: Download Deployment Artifacts
      if: needs.deploy.result == 'success'
      uses: actions/download-artifact@v4
      with:
        name: deployment-outputs
    
    - name: Extract Server IP
      if: needs.deploy.result == 'success'
      run: |
        SERVER_IP=$(jq -r '.instance_public_ip.value' deployment-outputs.json)
        echo "SERVER_IP=$SERVER_IP" >> $GITHUB_ENV
    
    - name: Create Deployment Summary
      run: |
        echo "## 🎮 Minecraft Server Deployment" >> $GITHUB_STEP_SUMMARY
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "✅ **Status**: Deployment Successful" >> $GITHUB_STEP_SUMMARY
          echo "🌐 **Server IP**: \`${{ env.SERVER_IP }}:25565\`" >> $GITHUB_STEP_SUMMARY
          echo "🎯 **Connection**: Add server in Minecraft with IP \`${{ env.SERVER_IP }}:25565\`" >> $GITHUB_STEP_SUMMARY
          echo "📊 **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Status**: Deployment Failed" >> $GITHUB_STEP_SUMMARY
          echo "🔍 **Check**: Review the logs above for error details" >> $GITHUB_STEP_SUMMARY
        fi
        echo "⏰ **Deployed**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
